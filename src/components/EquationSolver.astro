---
// src/components/EquationSolver.astro

import '../styles/global.css'; // If you have global styles

interface Result {
  roots: string[];
  type: string;
}

let coefficients: string[] = Array(5).fill('');
let error: string = '';
let result: Result | null = {
  roots: ['2 + 3i', '2 - 3i', '-1'],
  type: 'Complex and Real Roots'
};

function handleChange(index: number, value: string): void {
  if (value === '' || /^-?\d*[,.]?\d*$/.test(value)) {
    coefficients[index] = value;
    error = '';
    // Example of logging from frontmatter (server-side or early client-side):
    // console.log(`Coefficient ${index} changed to: ${value}`);
  }
}

function handleReset(): void {
  console.log("Resetting form (from frontmatter)"); // Log from frontmatter
  coefficients = Array(5).fill('');
  error = '';
  result = null;
  // You could also trigger client-side reset actions from here if needed
  // (e.g., clearing input field focus, animations, etc.) - see <script> section.
}

function handleSubmit(event: Event): void {
  event.preventDefault();

  const numericCoefficients: number[] = coefficients.map(coeff => {
    const normalizedCoeff = (coeff || '0').replace(',', '.');
    return parseFloat(normalizedCoeff);
  });

  const hasInvalidInput: boolean = numericCoefficients.some(val => isNaN(val));

  if (hasInvalidInput) {
    error = 'Please enter valid numbers for all coefficients';
    return;
  }

  result = {
    roots: ['2 + 3i', '2 - 3i', '-1'],
    type: 'Complex and Real Roots'
  };
}

function renderEquation(): string {
  const numericCoefficients: number[] = coefficients.map(coeff => {
    const normalizedCoeff = (coeff || '0').replace(',', '.');
    return parseFloat(normalizedCoeff);
  });

  let elements: string[] = [];
  for (let power = numericCoefficients.length - 1; power >= 0; power--) {
    const coeff = numericCoefficients[power];
    if (coeff !== 0) {
      let termElements: string[] = [];
      if (elements.length > 0) {
        termElements.push(coeff > 0 ? ' + ' : ' - ');
      } else if (coeff < 0) {
        termElements.push('-');
      }
      const absCoeff = Math.abs(coeff);
      if (power === 0) {
        termElements.push(absCoeff.toString());
      } else {
        if (absCoeff !== 1) {
          termElements.push(absCoeff.toString());
        }
        termElements.push('x');
        if (power > 1) {
          termElements.push(
            `<sup class="align-top" style="font-size: 0.75em;">${power}</sup>`
          );
        }
      }
      elements.push(`<span key=${power}>${termElements.join('')}</span>`);
    }
  }
  return elements.length > 0 ? elements.join('') : '0';
}
---

<div class="w-max mx-auto p-6 bg-white/90 rounded-lg shadow-md backdrop-blur-sm" style="font-family: 'Cormorant Garamond', serif;">
  <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">
    Polynomial Equation Solver
  </h2>

  <form class="space-y-6" on:submit={handleSubmit} data-equation-form> {/* Added data attribute to form */}
    <div class="flex flex-wrap gap-6 justify-center items-center" data-coefficients-inputs> {/* Added data attribute to container */}
      {
        coefficients.slice().reverse().map((coeff, index) => {
          const reversedIndex = coefficients.length - 1 - index;
          return (
            <div
              key={index}
              class="relative group flex items-end border-b-2 border-gray-300 focus-within:border-gray-800"
            >
              <input
                type="text"
                inputmode="decimal"
                value={coeff}
                // on:input={(e) => handleChange(reversedIndex, (e.target as HTMLInputElement).value)}
                class="w-24 p-0 bg-transparent outline-none transition-colors text-right font-sans text-xl text-gray-800 coefficient-input" 
                placeholder="0"
                data-coefficient-input={reversedIndex} // Added data attribute for individual inputs
              />
              {reversedIndex > 0 && (
                <span class="ml-1 font-sans text-xl text-gray-800">
                  {reversedIndex === 1 ? (
                    <>x +</>
                  ) : (
                    <>
                      x
                      <sup
                        class=""
                        style="font-size: 0.75em;"
                      >
                        {reversedIndex === 2 ? '2' : reversedIndex === 3 ? '3' : '4'}
                      </sup>
                      {' +'}
                    </>
                  )}
                </span>
              )}
              <div
                class="absolute bottom-0 left-0 w-full h-0.5 bg-gray-800
                           scale-x-0 group-hover:scale-x-100 transition-transform duration-300"
              />
            </div>
          );
        })
      }
      <div class="font-sans relative group flex items-center">= 0</div>
    </div>

    {error && (
      <div class="text-red-600 text-center font-medium">
        {error}
      </div>
    )}

    <div class="flex gap-4 justify-center">
      <button
        type="submit"
        class="px-6 py-2.5 bg-gray-800 text-white rounded-lg
                       hover:bg-gray-900 focus:outline-none focus:ring-2
                       focus:ring-gray-800 focus:ring-opacity-50
                       transition-all duration-200 ease-in-out hover:shadow-lg solve-button" // Added class
      >
        Solve Equation
      </button>
      <button
        type="button"
        on:click={handleReset}
        class="px-6 py-2.5 bg-gray-500 text-white rounded-lg
                       hover:bg-gray-600 focus:outline-none focus:ring-2
                       focus:ring-gray-500 focus:ring-opacity-50
                       transition-all duration-200 ease-in-out hover:shadow-lg reset-button" // Added class
      >
        Reset
      </button>
    </div>
  </form>
  {result && (
      <div class="bg-gray-50 rounded-lg p-4 border border-gray-200 solution-box"> {/* Added class */}
        <h3 class="text-lg font-semibold mb-2">Solution</h3>
        <p class="text-gray-700 mb-2">Type: {result.type}</p>
        <div class="space-y-1 solution-roots"> {/* Added class */}
          {result.roots.map((root, index) => (
            <p key={index} class="font-mono">
              x{index + 1} = {root}
            </p>
          ))}
        </div>
      </div>
    )}
</div>

<style>
  /* Styles can be placed here or imported globally */
</style>

<script>
  // Client-side script for EquationSolver component

  console.log("EquationSolver component script is running (client-side)"); // Initial log

  const form = document.querySelector('[data-equation-form]');
  const solveButton = form?.querySelector('.solve-button'); // Example of DOM access within <script>
  const resetButton = form?.querySelector('.reset-button');
  const coefficientInputsContainer = document.querySelector('[data-coefficients-inputs]');
  const coefficientInputs = form?.querySelectorAll('.coefficient-input'); // Selecting by class
  const solutionBox = document.querySelector('.solution-box');
  const solutionRoots = solutionBox?.querySelector('.solution-roots');


  if (solveButton) {
    solveButton.addEventListener('click', () => {
      console.log("Solve button clicked (client-side)");
      // You could add client-side actions here if needed,
      // e.g., animations, visual feedback, etc.

      // Example: Add a class to the solve button on click (just for demonstration)
      solveButton.classList.add('solve-button-clicked');
      setTimeout(() => {
        solveButton.classList.remove('solve-button-clicked'); // Remove after a delay
      }, 500); // 0.5 second delay
    });
  }

  if (resetButton) {
    resetButton.addEventListener('click', () => {
      console.log("Reset button clicked (client-side)");

      // Example: Clear input field focus (if any input is focused after reset)
      coefficientInputs.forEach(input => {
        (input as HTMLInputElement).blur(); // Programmatically blur (remove focus)
      });
    });
  }

  // Example of reacting to input changes client-side (though handleChange in frontmatter is primary)
  coefficientInputs.forEach(input => {
    input.addEventListener('input', (event) => {
      const inputValue = (event.target as HTMLInputElement).value;
      const inputIndex = (event.target as HTMLElement).dataset.coefficientInput; // Access data attribute

      // Client-side logging of input changes (in addition to handleChange in frontmatter)
      console.log(`Input ${inputIndex} changed on client-side to: ${inputValue}`);

      // You could add client-side validation or visual feedback here if desired.
    });
  });

  // Example: After solution is displayed, you could add a client-side animation
  if (solutionBox) {
    // Example: Simple fade-in animation (you'd need to define CSS for 'fade-in-solution')
    // solutionBox.classList.add('fade-in-solution'); // Add class to trigger animation
    console.log("Solution box is present in the DOM (client-side)");
  }
</script>